@baseUrl = http://localhost:3000/api
@authToken = 
@customerToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijk4NGRmMjA1LTExMGUtNGIxOC05NTk1LTMyNmVmMDI2YTk2NCIsInVzZXJUeXBlIjoiQ1VTVE9NRVIiLCJpYXQiOjE3Mzg3NzcwNzMsImV4cCI6MTc0MTM2OTA3M30.ODQ3T3qUplamlu1PHuyiF3evFJlpJ-7yvqCgmSS8rqA
@driverToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImZjMzFkYmEwLTZmOWUtNGIwYi04NDJhLTIxODk4ZGE3OTcxZiIsInVzZXJUeXBlIjoiRFJJVkVSIiwiaWF0IjoxNzM4Nzc3MTM2LCJleHAiOjE3NDEzNjkxMzZ9.Vq_FAmWL_1I2Y_WiIgRxkPoxpymL0QO2Wno4V-dZ2D4
@customerId = 984df205-110e-4b18-9595-326ef026a964
@driverId = fc31dba0-6f9e-4b0b-842a-21898da7971f
@vehicleId = 


### Register Customer
POST {{baseUrl}}/auth/customer/register HTTP/1.1
Content-Type: application/json

{
    "name": "John Customer",
    "email": "john.customer@example.com",
    "password": "securepassword123",
    "phone": "+1234567890"
}

###

### Login Customer
POST {{baseUrl}}/auth/customer/login HTTP/1.1
Content-Type: application/json

{
    "email": "john.customer@example.com",
    "password": "securepassword123"
}

###

### Register Driver
POST {{baseUrl}}/auth/driver/register HTTP/1.1
Content-Type: application/json

{
    "name": "John Driver",
    "email": "john.driver@example.com",
    "password": "securepassword123",
    "phone": "+1234567890",
    "licenseNumber": "DL123456"
}

###

### Login Driver
POST {{baseUrl}}/auth/driver/login HTTP/1.1
Content-Type: application/json

{
    "email": "john.driver@example.com",
    "password": "securepassword123"
}


### Notification Routes ###

### Create a new notification
POST {{baseUrl}}/notifications HTTP/1.1
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
    "userId": "{{customerId}}",
    "userType": "CUSTOMER",
    "title": "New Ride Request",
    "message": "You have a new ride request from downtown"
}

###

### Get user notifications
GET {{baseUrl}}/notifications/user/{{customerId}} HTTP/1.1
Authorization: Bearer {{customerToken}}

###

### Mark notification as read
PUT {{baseUrl}}/notifications/NOTIFICATION_ID_HERE/read HTTP/1.1
Authorization: Bearer {{authToken}}

###

### 1. Create notification (as Customer)
POST {{baseUrl}}/notifications HTTP/1.1
Authorization: Bearer {{customerToken}}
Content-Type: application/json

{
    "userId": "{{customerId}}",
    "userType": "CUSTOMER",
    "title": "Ride Request",
    "message": "Your ride has been requested"
}

###

### 6. Get customer notifications
GET {{baseUrl}}/notifications/user/{{customerId}} HTTP/1.1
Authorization: Bearer {{customerToken}}

###

### 7. Create notification (as Driver)
POST {{baseUrl}}/notifications HTTP/1.1
Authorization: Bearer {{driverToken}}
Content-Type: application/json

{
    "userId": "{{driverId}}",
    "userType": "DRIVER",
    "title": "New Ride Available",
    "message": "There's a new ride request in your area"
}

###

### 8. Get driver notifications
GET {{baseUrl}}/notifications/user/{{driverId}} HTTP/1.1
Authorization: Bearer {{driverToken}}

### Test Notification API ###

### 1. Create Customer Notification
POST {{baseUrl}}/notifications
Authorization: Bearer {{customerToken}}
Content-Type: application/json

{
    "userId": "{{customerId}}",
    "userType": "CUSTOMER",
    "title": "Test Customer Notification",
    "message": "This is a test notification for customer"
}

### 2. Create Driver Notification
POST {{baseUrl}}/notifications
Authorization: Bearer {{driverToken}}
Content-Type: application/json

{
    "userId": "{{driverId}}",
    "userType": "DRIVER",
    "title": "Test Driver Notification",
    "message": "This is a test notification for driver"
}

### 3. Get Customer Notifications
GET {{baseUrl}}/notifications/user/{{customerId}}
Authorization: Bearer {{customerToken}}

### 4. Get Driver Notifications
GET {{baseUrl}}/notifications/user/{{driverId}}
Authorization: Bearer {{driverToken}}

### 5. Mark notification as read (replace NOTIFICATION_ID with an actual ID)
PUT {{baseUrl}}/notifications/1/read
Authorization: Bearer {{customerToken}}

### OTP and Password Reset Routes ###

### Send OTP
POST {{baseUrl}}/auth/send-otp
Content-Type: application/json

{
    "userId": "{{customerId}}",
    "userType": "CUSTOMER",
    "email": "user@example.com"
}

### Verify OTP
POST {{baseUrl}}/auth/verify-otp
Content-Type: application/json

{
    "email": "user@example.com",
    "userType": "CUSTOMER",  // or "DRIVER"
    "otp": "123456"
}

### Forgot Password
POST {{baseUrl}}/auth/forgot-password
Content-Type: application/json

{
    "email": "user@example.com",
    "userType": "CUSTOMER"  // or "DRIVER"
}

### Reset Password
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
    "token": "reset-token-from-email",
    "userType": "CUSTOMER",  // or "DRIVER"
    "newPassword": "newpassword123"
}

### Vehicle Routes ###

### Create a new vehicle
POST {{baseUrl}}/vehicles
Authorization: Bearer {{driverToken}}
Content-Type: application/json

{
  "driverId": "{{driverId}}",
  "type": "CAR",
  "regNo": "ABC123",
  "model": "Camry",
  "color": "Silver"
}

###

### Get all vehicles for a specific driver
GET {{baseUrl}}/vehicles/driver/{{driverId}}
Authorization: Bearer {{driverToken}}

###

### Update a vehicle
PUT {{baseUrl}}/vehicles/{{vehicleId}}
Authorization: Bearer {{driverToken}}
Content-Type: application/json

{
  "type": "CAR",
  "model": "Camry",
  "color": "Black",
  "isActive": true
}

###

### Delete a vehicle
DELETE {{baseUrl}}/vehicles/{{vehicleId}}
Authorization: Bearer {{driverToken}}
