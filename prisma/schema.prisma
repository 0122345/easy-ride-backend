// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum RideStatus {
  REQUESTED
  ACCEPTED
  COMPLETED
  CANCELED
}

enum VehicleType {
  CAR
  BIKE
  VAN
  TRUCK
}

enum UserType {
  CUSTOMER
  DRIVER
}

model Customer {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  phone          String
  isVerified     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  rideRequests   RideRequest[]
  trips          Trip[]
  notifications  Notification[]
  otps           OTP[]
  passwordResets PasswordReset[]
  ratings        CustomerRating[]

  DriverRating DriverRating[]
}

model Driver {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  password       String
  phone          String
  licenseNumber  String
  isVerified     Boolean        @default(false)
  currentLocation Json?         
  isAvailable    Boolean        @default(true)
  createdAt      DateTime       @default(now())
  vehicles       Vehicle[]
  rideAccepts    RideAccept[]
  trips          Trip[]
  notifications  Notification[]
  otps           OTP[]
  passwordResets PasswordReset[]
  ratings        DriverRating[]

  CustomerRating CustomerRating[]
}

model Vehicle {
  id        String      @id @default(uuid())
  driverId  String
  driver    Driver      @relation(fields: [driverId], references: [id])
  type      VehicleType
  regNo     String      @unique
  model     String
  color     String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
}

model RideRequest {
  id             String      @id @default(uuid())
  customerId     String
  customer       Customer    @relation(fields: [customerId], references: [id])
  source         Json        
  destination    Json        
  estimatedPrice Float
  createdAt      DateTime    @default(now())
  rideAccept     RideAccept?
  trip           Trip?
}

model RideAccept {
  id         String      @id @default(uuid())
  requestId  String      @unique
  request    RideRequest @relation(fields: [requestId], references: [id])
  driverId   String
  driver     Driver      @relation(fields: [driverId], references: [id])
  acceptedAt DateTime    @default(now())
}

model Trip {
  id             String          @id @default(uuid())
  customerId     String
  customer       Customer        @relation(fields: [customerId], references: [id])
  driverId       String
  driver         Driver          @relation(fields: [driverId], references: [id])
  requestId      String          @unique
  request        RideRequest     @relation(fields: [requestId], references: [id])
  status         RideStatus
  source         Json            
  destination    Json            
  paymentStatus  PaymentStatus
  createdAt      DateTime        @default(now())
  rideComplete   RideComplete?
  rideCancel     RideCancel?
  customerRating CustomerRating?
  driverRating   DriverRating?
}

model RideComplete {
  id           String   @id @default(uuid())
  tripId       String   @unique
  trip         Trip     @relation(fields: [tripId], references: [id])
  finalAmount  Float
  completedAt  DateTime @default(now())
}

model RideCancel {
  id             String   @id @default(uuid())
  tripId         String   @unique
  trip           Trip     @relation(fields: [tripId], references: [id])
  canceledByType UserType
  canceledById   String
  reason         String
  canceledAt     DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userType  UserType
  userId    String
  customer  Customer? @relation(fields: [userId], references: [id], map: "Notification_customer_fkey")
  driver    Driver?   @relation(fields: [userId], references: [id], map: "Notification_driver_fkey")
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model OTP {
  id         String   @id @default(uuid())
  userType   UserType
  userId     String
  customer   Customer? @relation(fields: [userId], references: [id], map: "OTP_customer_fkey")
  driver     Driver?   @relation(fields: [userId], references: [id], map: "OTP_driver_fkey")
  code       String
  isVerified Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(uuid())
  userType  UserType
  userId    String
  customer  Customer? @relation(fields: [userId], references: [id], map: "PasswordReset_customer_fkey")
  driver    Driver?   @relation(fields: [userId], references: [id], map: "PasswordReset_driver_fkey")
  token     String
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model CustomerRating {
  id         String   @id @default(uuid())
  tripId     String   @unique
  trip       Trip     @relation(fields: [tripId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  driverId   String
  driver     Driver   @relation(fields: [driverId], references: [id])
  rating     Int
  feedback   String?
  createdAt  DateTime @default(now())
}

model DriverRating {
  id         String   @id @default(uuid())
  tripId     String   @unique
  trip       Trip     @relation(fields: [tripId], references: [id])
  driverId   String
  driver     Driver   @relation(fields: [driverId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  rating     Int
  feedback   String?
  createdAt  DateTime @default(now())
}