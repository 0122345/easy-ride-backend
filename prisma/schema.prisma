generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  password        String
  phone           String
  avatar          String?
  currentLocation Json?
  isVerified      Boolean          @default(false)
  createdAt       DateTime         @default(now())
  ratings         CustomerRating[]
  DriverRating    DriverRating[]
  notifications   Notification[]
  otps            OTP[]
  passwordResets  PasswordReset[]
  rideRequests    RideRequest[]
  trips           Trip[]
  chatrooms       ChatRoom[]
  wallet          Wallet?
  messages   Message[]
}

model Driver {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  password        String
  phone           String
  avatar          String?
  licenseNumber   String
  isVerified      Boolean          @default(false)
  currentLocation Json?
  isAvailable     Boolean          @default(true)
  createdAt       DateTime         @default(now())
  CustomerRating  CustomerRating[]
  ratings         DriverRating[]
  notifications   Notification[]
  otps            OTP[]
  passwordResets  PasswordReset[]
  rideAccepts     RideAccept[]
  trips           Trip[]
  vehicles        Vehicle[]
  chatrooms       ChatRoom[]
  wallet          Wallet?
  messages   Message[]
}

model Vehicle {
  id        String      @id @default(uuid())
  driverId  String
  type      VehicleType
  regNo     String      @unique
  model     String
  color     String
  avatar    String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  driver    Driver      @relation(fields: [driverId], references: [id])
}

model RideRequest {
  id             String      @id @default(uuid())
  customerId     String
  source         Json
  destination    Json
  estimatedPrice Float
  createdAt      DateTime    @default(now())
  status         RideStatus  @default(REQUESTED)
  rideAccept     RideAccept?
  customer       Customer    @relation(fields: [customerId], references: [id])
  trip           Trip?
}

model RideAccept {
  id         String      @id @default(uuid())
  requestId  String      @unique
  driverId   String
  acceptedAt DateTime    @default(now())
  driver     Driver      @relation(fields: [driverId], references: [id])
  request    RideRequest @relation(fields: [requestId], references: [id])
}

model Trip {
  id             String          @id @default(uuid())
  customerId     String
  driverId       String
  requestId      String          @unique
  status         RideStatus
  source         Json
  destination    Json
  paymentStatus  PaymentStatus
  createdAt      DateTime        @default(now())
  customerRating CustomerRating?
  driverRating   DriverRating?
  rideCancel     RideCancel?
  rideComplete   RideComplete?
  customer       Customer        @relation(fields: [customerId], references: [id])
  driver         Driver          @relation(fields: [driverId], references: [id])
  request        RideRequest     @relation(fields: [requestId], references: [id])
}

model RideComplete {
  id          String   @id @default(uuid())
  tripId      String   @unique
  finalAmount Float
  completedAt DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id])
}

model RideCancel {
  id             String   @id @default(uuid())
  tripId         String   @unique
  canceledByType UserType
  canceledById   String
  reason         String
  canceledAt     DateTime @default(now())
  trip           Trip     @relation(fields: [tripId], references: [id])
}

model Notification {
  id         String    @id @default(uuid())
  title      String
  message    String
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  customerId String?
  driverId   String?
  customer   Customer? @relation(fields: [customerId], references: [id], map: "Notification_customer_fkey")
  driver     Driver?   @relation(fields: [driverId], references: [id], map: "Notification_driver_fkey")
}

model OTP {
  id         String    @id @default(uuid())
  userType   UserType
  userId     String
  code       String
  isVerified Boolean   @default(false)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  customerId String?
  driverId   String?
  customer   Customer? @relation(fields: [customerId], references: [id], map: "OTP_customer_fkey")
  driver     Driver?   @relation(fields: [driverId], references: [id], map: "OTP_driver_fkey")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userType  UserType
  userId    String
  token     String
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  customer  Customer @relation(fields: [userId], references: [id], map: "PasswordReset_customer_fkey")
  driver    Driver   @relation(fields: [userId], references: [id], map: "PasswordReset_driver_fkey")
}

model CustomerRating {
  id         String   @id @default(uuid())
  tripId     String   @unique
  customerId String
  driverId   String
  rating     Int
  feedback   String?
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  driver     Driver   @relation(fields: [driverId], references: [id])
  trip       Trip     @relation(fields: [tripId], references: [id])
}

model DriverRating {
  id         String   @id @default(uuid())
  tripId     String   @unique
  driverId   String   @unique
  customerId String   @unique
  rating     Int
  feedback   String?
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  driver     Driver   @relation(fields: [driverId], references: [id])
  trip       Trip     @relation(fields: [tripId], references: [id])
}

model Wallet {
  id         String    @id @default(uuid())
  balance    Float     @default(0)
  driverId   String    @unique
  customerId String    @unique
  userType   UserType
  driver     Driver?   @relation(fields: [driverId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ChatRoom {
  id         String    @id @default(uuid())
  customerId String
  driverId   String
  driver     Driver    @relation(fields: [driverId], references: [id])
  customer   Customer  @relation(fields: [customerId], references: [id])
  createdAt  DateTime  @default(now())
  messages   Message[]
}

model Message {
  id         String    @id @default(uuid())
  chatRoomId String
  customerId String?   // Optional foreign key for Customer
  driverId   String?   // Optional foreign key for Driver
  content    String
  createdAt  DateTime  @default(now())
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id]) // Optional relation to Customer
  driver     Driver?   @relation(fields: [driverId], references: [id])   // Optional relation to Driver
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum RideStatus {
  REQUESTED
  ACCEPTED
  ONGOING
  COMPLETED
  CANCELED
}

enum VehicleType {
  CAR
  BIKE
  VAN
  TRUCK
}

enum UserType {
  CUSTOMER
  DRIVER
}
