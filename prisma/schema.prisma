// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String    @unique
  passwordHash       String
  phoneNumber        String?
  role               Role      @default(rider)
  currentLat         Float?
  currentLon         Float?
  lastLocationUpdate DateTime?
  isActive           Boolean   @default(true)
  vehicles           Vehicle[]
  ridesRequested     Ride[]    @relation("RequestedRides")
  ridesAccepted      Ride[]    @relation("AcceptedRides")
  notifications      Notification[]
  rideRequests       RideRequest[]
  rideAccepts        RideAccept[]
  rideCancels        RideCancel[]
  rideCompletes      RideComplete[]
}

enum Role {
  admin
  rider
  driver
}

model Vehicle {
  id           Int    @id @default(autoincrement())
  userId       Int
  make         String
  model        String
  year         Int
  licensePlate String
  color        String
  user         User   @relation(fields: [userId], references: [id])
  type         VehicleType @default(car)
}

enum VehicleType {
  car
  bike
  van
  truck
}

model Ride {
  id               Int         @id @default(autoincrement())
  riderId          Int
  driverId         Int?
  pickupLocation   String
  dropoffLocation  String
  status           RideStatus  @default(requested)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  rider            User        @relation("RequestedRides", fields: [riderId], references: [id])
  driver           User?       @relation("AcceptedRides", fields: [driverId], references: [id])
  payment          Payment?
  rideRequests     RideRequest[]
  rideAccepts      RideAccept[]
  rideCancels      RideCancel[]
  rideCompletes    RideComplete[]
}

enum RideStatus {
  requested
  accepted
  completed
  canceled
}

model Payment {
  id        Int           @id @default(autoincrement())
  rideId    Int           @unique
  amount    Float
  status    PaymentStatus @default(pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ride      Ride          @relation(fields: [rideId], references: [id])
}

enum PaymentStatus {
  pending
  success
  failed
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model RideRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  rideId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  ride      Ride     @relation(fields: [rideId], references: [id])
}

model RideAccept {
  id        Int      @id @default(autoincrement())
  userId    Int
  rideId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  ride      Ride     @relation(fields: [rideId], references: [id])
}

model RideCancel {
  id        Int      @id @default(autoincrement())
  userId    Int
  rideId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  ride      Ride     @relation(fields: [rideId], references: [id])
}

model RideComplete {
  id        Int      @id @default(autoincrement())
  userId    Int
  rideId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  ride      Ride     @relation(fields: [rideId], references: [id])
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

